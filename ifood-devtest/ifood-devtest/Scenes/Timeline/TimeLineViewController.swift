//
//  TimeLineViewController.swift
//  ifood-devtest
//
//  Created by Rafael Zilião on 28/11/18.
//  Copyright (c) 2018 Rafael Zilião. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import TwitterKit

protocol TimeLineDisplayLogic: class {
    func displayTweets(viewModel: TimeLine.Tweets.ViewModel)
    func displayTweetAnalysis()
    func displayFetchTweetsErrorMessage()
}

class TimeLineViewController: TWTRTimelineViewController, TimeLineDisplayLogic {
    var interactor: TimeLineBusinessLogic?
    var router: (NSObjectProtocol & TimeLineRoutingLogic & TimeLineDataPassing)?
    var lastTimelineSearched = ""
    var defaultUser = "neiltyson"
    
    private lazy var searchController: UISearchController = {
        let searchController = UISearchController(searchResultsController: nil)
        
        searchController.searchResultsUpdater = self
        searchController.obscuresBackgroundDuringPresentation = false
        searchController.hidesNavigationBarDuringPresentation = false
        searchController.searchBar.placeholder = NSLocalizedString("SEARCH_PLACE_HOLDER", comment: "")
        searchController.searchBar.text = defaultUser
        
        if let textfield = searchController.searchBar.value(forKey: "searchField") as? UITextField {
            textfield.textColor = .blue
            if let backgroundview = textfield.subviews.first {
                
                // Background color
                backgroundview.backgroundColor = UIColor.white
                
                // Rounded corner
                backgroundview.layer.cornerRadius = 10;
                backgroundview.clipsToBounds = true;
            }
        }

        searchController.searchBar.tintColor = .white
        searchController.searchBar.barTintColor = .white
        
        return searchController
        
    }()
   
    // MARK: Setup
  
    private func setup() {
        let viewController = self
        let interactor = TimeLineInteractor()
        let presenter = TimeLinePresenter()
        let router = TimeLineRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    private func setupTwitterKitDelegates() {
        self.tweetViewDelegate = self
        self.timelineDelegate = self
    }
    
    private func setupUI() {
        title = NSLocalizedString("APPLICATION_TITLE", comment: "")
        navigationController?.navigationBar.barTintColor = .twitterLogoBlue
        navigationController?.navigationBar.tintColor = .white
        navigationItem.backBarButtonItem = UIBarButtonItem(title: "", style: .plain, target: nil, action: nil)
        navigationController?.navigationBar.titleTextAttributes = [NSAttributedStringKey.foregroundColor : UIColor.white]
        navigationItem.searchController = searchController
        navigationItem.hidesSearchBarWhenScrolling = true
        definesPresentationContext = true
    }
    
    // MARK: Routing
  
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
  
    // MARK: View lifecycle
  
    override func viewDidLoad() {
        super.viewDidLoad()

        setup()
        setupTwitterKitDelegates()
        setupUI()
        fetchTweets()
    }
  
    // MARK: Fetch data
    
    private func fetchTweets() {
        let request = TimeLine.Tweets.Request(user: searchController.searchBar.text ?? defaultUser)
        interactor?.fetchUserTweets(request: request)
    }
    
    // MARK: Display methods
    
    func displayTweets(viewModel: TimeLine.Tweets.ViewModel) {
        dataSource = viewModel.fetchedTweets
    }
    
    func displayTweetAnalysis() {
        router?.routeToSentimentAnalysis()
    }
    
    func displayFetchTweetsErrorMessage() {
        let alert = UIAlertController(title: NSLocalizedString("WARNING", comment: ""), message: NSLocalizedString("ERROR_MESSAGE_FETCH_TIME_LINE", comment: ""), preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: NSLocalizedString("OK", comment: ""), style: .default, handler: nil))
        present(alert, animated: true, completion: nil)
    }
}

extension TimeLineViewController: TWTRTweetViewDelegate {
    
    func tweetView(tweetView: TWTRTweetView, didSelectTweet tweet: TWTRTweet) {
        let request = TimeLine.Tweet.Request(tweet: tweet.text)
        interactor?.AnalyzeTweet(request: request)
    }
    
    func tweetView(_ tweetView: TWTRTweetView, didTap url: URL) {
        let request = TimeLine.Tweet.Request(tweet: tweetView.tweet.text)
        interactor?.AnalyzeTweet(request: request)
    }
    
    func tweetView(_ tweetView: TWTRTweetView, didTap tweet: TWTRTweet) {
        let request = TimeLine.Tweet.Request(tweet: tweetView.tweet.text)
        interactor?.AnalyzeTweet(request: request)

    }
    
    func tweetView(_ tweetView: TWTRTweetView, didTap image: UIImage, with imageURL: URL) {
        let request = TimeLine.Tweet.Request(tweet: tweetView.tweet.text)
        interactor?.AnalyzeTweet(request: request)

    }
    
    func tweetView(_ tweetView: TWTRTweetView, didTapVideoWith videoURL: URL) {
        let request = TimeLine.Tweet.Request(tweet: tweetView.tweet.text)
        interactor?.AnalyzeTweet(request: request)

    }
    
    func tweetView(_ tweetView: TWTRTweetView, didTapProfileImageFor user: TWTRUser) {
        let request = TimeLine.Tweet.Request(tweet: tweetView.tweet.text)
        interactor?.AnalyzeTweet(request: request)
    }
}

extension TimeLineViewController: TWTRTimelineDelegate {
    
}

extension TimeLineViewController : UISearchResultsUpdating {
    
    func updateSearchResults(for searchController: UISearchController) {
        guard let text = searchController.searchBar.text, text.count > 0, text != lastTimelineSearched else {
            return
        }
        
        lastTimelineSearched = ""
        
        delay(seconds: 0.5) {
            let request = TimeLine.Tweets.Request(user: text)
            self.interactor?.fetchUserTweets(request: request)
        }

    }
    
}
