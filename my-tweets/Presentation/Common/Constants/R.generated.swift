//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `Cartfile`.
    static let cartfile = Rswift.FileResource(bundle: R.hostingBundle, name: "Cartfile", pathExtension: "")
    
    /// `bundle.url(forResource: "Cartfile", withExtension: "")`
    static func cartfile(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cartfile
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 0 images.
  struct image {
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 3 nibs.
  struct nib {
    /// Nib `EmptyErrorStateView`.
    static let emptyErrorStateView = _R.nib._EmptyErrorStateView()
    /// Nib `HomeTableViewCell`.
    static let homeTableViewCell = _R.nib._HomeTableViewCell()
    /// Nib `HomeViewController`.
    static let homeViewController = _R.nib._HomeViewController()
    
    /// `UINib(name: "EmptyErrorStateView", in: bundle)`
    static func emptyErrorStateView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.emptyErrorStateView)
    }
    
    /// `UINib(name: "HomeTableViewCell", in: bundle)`
    static func homeTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeTableViewCell)
    }
    
    /// `UINib(name: "HomeViewController", in: bundle)`
    static func homeViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeViewController)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 14 localization keys.
    struct localizable {
      /// en translation: BackgroundScheduler
      /// 
      /// Locales: en
      static let background_scheduler = Rswift.StringResource(key: "background_scheduler", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Error
      /// 
      /// Locales: en
      static let generic_error_title = Rswift.StringResource(key: "generic_error_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: MainScheduler
      /// 
      /// Locales: en
      static let main_scheduler = Rswift.StringResource(key: "main_scheduler", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: My Tweets
      /// 
      /// Locales: en
      static let app_name = Rswift.StringResource(key: "app_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Nothing to show :(
      /// 
      /// Locales: en
      static let not_found = Rswift.StringResource(key: "not_found", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: OK
      /// 
      /// Locales: en
      static let ok = Rswift.StringResource(key: "ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: QMSIq7IjziOA63HasyU5JU5HV
      /// 
      /// Locales: en
      static let costumer_key = Rswift.StringResource(key: "costumer_key", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Search
      /// 
      /// Locales: en
      static let search = Rswift.StringResource(key: "search", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Tweets
      /// 
      /// Locales: en
      static let tweets = Rswift.StringResource(key: "tweets", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Type an @user
      /// 
      /// Locales: en
      static let home_search_bar = Rswift.StringResource(key: "home_search_bar", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Unable to connect :(. Please verify your internet connection and try again.
      /// 
      /// Locales: en
      static let check_your_internet_connection = Rswift.StringResource(key: "check_your_internet_connection", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Unable to stablish communication :(. Try again later.
      /// 
      /// Locales: en
      static let generic_error = Rswift.StringResource(key: "generic_error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Unexpected error :(. Try again.
      /// 
      /// Locales: en
      static let unexpected_error = Rswift.StringResource(key: "unexpected_error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: sQcOdMQRMOlz2vOXLmUkBVLfm1vAdEnb6ltV1HEDBpFboaV4gs
      /// 
      /// Locales: en
      static let costumerSecret = Rswift.StringResource(key: "costumerSecret", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      
      /// en translation: BackgroundScheduler
      /// 
      /// Locales: en
      static func background_scheduler(_: Void = ()) -> String {
        return NSLocalizedString("background_scheduler", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Error
      /// 
      /// Locales: en
      static func generic_error_title(_: Void = ()) -> String {
        return NSLocalizedString("generic_error_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: MainScheduler
      /// 
      /// Locales: en
      static func main_scheduler(_: Void = ()) -> String {
        return NSLocalizedString("main_scheduler", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: My Tweets
      /// 
      /// Locales: en
      static func app_name(_: Void = ()) -> String {
        return NSLocalizedString("app_name", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Nothing to show :(
      /// 
      /// Locales: en
      static func not_found(_: Void = ()) -> String {
        return NSLocalizedString("not_found", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: OK
      /// 
      /// Locales: en
      static func ok(_: Void = ()) -> String {
        return NSLocalizedString("ok", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: QMSIq7IjziOA63HasyU5JU5HV
      /// 
      /// Locales: en
      static func costumer_key(_: Void = ()) -> String {
        return NSLocalizedString("costumer_key", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Search
      /// 
      /// Locales: en
      static func search(_: Void = ()) -> String {
        return NSLocalizedString("search", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Tweets
      /// 
      /// Locales: en
      static func tweets(_: Void = ()) -> String {
        return NSLocalizedString("tweets", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Type an @user
      /// 
      /// Locales: en
      static func home_search_bar(_: Void = ()) -> String {
        return NSLocalizedString("home_search_bar", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unable to connect :(. Please verify your internet connection and try again.
      /// 
      /// Locales: en
      static func check_your_internet_connection(_: Void = ()) -> String {
        return NSLocalizedString("check_your_internet_connection", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unable to stablish communication :(. Try again later.
      /// 
      /// Locales: en
      static func generic_error(_: Void = ()) -> String {
        return NSLocalizedString("generic_error", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unexpected error :(. Try again.
      /// 
      /// Locales: en
      static func unexpected_error(_: Void = ()) -> String {
        return NSLocalizedString("unexpected_error", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: sQcOdMQRMOlz2vOXLmUkBVLfm1vAdEnb6ltV1HEDBpFboaV4gs
      /// 
      /// Locales: en
      static func costumerSecret(_: Void = ()) -> String {
        return NSLocalizedString("costumerSecret", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R {
  struct nib {
    struct _EmptyErrorStateView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "EmptyErrorStateView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _HomeTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HomeTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> HomeTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _HomeViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HomeViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard {
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
